// generated by codegen, remove this comment if you wish to edit this file
/**
 * This module provides a hand-modifiable wrapper around the generated class `FormatArgument`.
 *
 * INTERNAL: Do not use.
 */

private import codeql.rust.elements.internal.generated.FormatArgument
private import codeql.rust.elements.internal.generated.Raw
private import codeql.rust.elements.internal.generated.Synth

/**
 * INTERNAL: This module contains the customizable definition of `FormatArgument` and should not
 * be referenced directly.
 */
module Impl {
  /**
   * An argument in a format element in a formatting template. For example the `width`, `precision`, and `value` in:
   * ```rust
   * println!("Value {value:#width$.precision$}");
   * ```
   * or the `0`, `1` and `2` in:
   * ```rust
   * println!("Value {0:#1$.2$}", value, width, precision);
   * ```
   */
  class FormatArgument extends Generated::FormatArgument {
    cached
    private Raw::FormatArgsExpr getUnderlyingParent() {
      this = Synth::TFormatArgument(result, _, _)
    }

    cached
    private int getUnderlyingIndex() { this = Synth::TFormatArgument(_, result, _) }

    cached
    private int getUnderlyingKind() { this = Synth::TFormatArgument(_, _, result) }
  }
}
